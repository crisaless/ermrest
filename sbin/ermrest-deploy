#!/bin/bash

# 
# Copyright 2012-2017 University of Southern California
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

if [[ $# -gt 0 ]]
then
    # allow VAR=value args to be passed on command-line
    if [[ -x /usr/bin/env ]]
    then
	exec /usr/bin/env "$@" "$0"
    else
	echo could not find 'env'
	exit 1
    fi
fi

# paths set for installation
VARLIBDIR=/var/lib/ermrest
LIBEXECDIR=/usr/libexec/ermrest
SHAREDIR=/usr/share/ermrest
SBINDIR=/usr/sbin
HTTPCONFDIR=${HTTPCONFDIR:-/etc/httpd/conf.d}
SU=su

# named parameters that can be set by caller or on command-line above to override defaults...

DEPLOYLOCK="${DEPLOYLOCK}"          # deploy mutual-exclusion marker, if non-empty

PGADMIN="${PGADMIN:-postgres}"
DAEMONUSER="${DAEMONUSER:-ermrest}" # Unix and DB user name for service daemon doing DDL

# make these available to child processes
export PGADMIN
export DAEMONUSER

TMP_SQL=$(mktemp /tmp/ermrest-deploy.sql.XXXXX)

cleanup()
{
    rm -f ${TMP_SQL}
}

trap cleanup 0

id ${DAEMONUSER} || useradd -m -r ${DAEMONUSER}

usermod -a -G apache ${DAEMONUSER}

chmod og+rx /home/${DAEMONUSER}

pgid()
{
    line=$($SU -c "psql -q -t -A -c \"select * from pg_roles where rolname = '$1'\"" - "${PGADMIN}")
    status=$?
    [[ $status -eq 0 ]] || return $status
    [[ -n "$line" ]] || return 1
    echo "$line"
    return 0
}

pgcreateuser()
{
    $SU -c "createuser $*" - ${PGADMIN}
}

pgid ${DAEMONUSER} || pgcreateuser -d -R -S ${DAEMONUSER}
$SU -c "psql -c 'grant webauthn to ermrest'" - ${PGADMIN}

if [[ -r /etc/redhat-release ]]
then
    SEMANAGE_HTTPD_SYS_CONTENT_T=httpd_sys_content_t
    
    semanage fcontext --add --ftype d --type "${SEMANAGE_HTTPD_SYS_CONTENT_T}" "/home/${DAEMONUSER}"
    semanage fcontext --add --type "${SEMANAGE_HTTPD_SYS_CONTENT_T}" "/home/${DAEMONUSER}/ermrest_config.json"
    restorecon -v /home/${DAEMONUSER}
    setsebool -P httpd_enable_homedirs on
fi

if [[ ! -r ${HTTPCONFDIR}/wsgi_ermrest.conf ]] || grep -q ermrestddl ${HTTPCONFDIR}/wsgi_ermrest.conf
then
    # install default config
    # or override conflicting legacy ermrestddl split config
    cp ${SHAREDIR}/wsgi_ermrest.conf ${HTTPCONFDIR}/.
fi

pgdbid()
{
    line=$($SU -c "psql -q -t -A -c \"select * from pg_database where datname = '$1'\"" - ${PGADMIN})
    status=$?
    [[ $status -eq 0 ]] || return $status
    [[ -n "$line" ]] || return 1
    echo "$line"
    return 0
}

pg_upgrade_catalog_sql()
{
    cat <<EOF
BEGIN;
ALTER DATABASE "$1" OWNER TO ${DAEMONUSER};
EOF

    $SU -c "psql -q -t -A -c \"SELECT nspname FROM pg_namespace WHERE nspname NOT IN ('pg_toast', 'pg_catalog', 'information_schema') AND NOT pg_is_other_temp_schema(oid)\" '$1'" - ${PGADMIN} | {
	while read schema
	do
	    cat <<EOF
ALTER SCHEMA "$schema" OWNER TO ${DAEMONUSER};
EOF
	    
	    $SU -c "psql -q -t -A -c \"select table_name from information_schema.tables where table_schema = '$schema' AND table_type = 'BASE TABLE'\" '$1'" - ${PGADMIN} | {
		while read table
		do
		    cat <<EOF
ALTER TABLE "$schema"."$table" OWNER TO ${DAEMONUSER}, FORCE ROW LEVEL SECURITY;
EOF
		done
	    }
	    
	    $SU -c "psql -q -t -A -c \"select table_name from information_schema.tables where table_schema = '$schema' AND table_type = 'VIEW'\" '$1'" - ${PGADMIN} | {
		while read table
		do
		    cat <<EOF
ALTER VIEW "$schema"."$table" OWNER TO ${DAEMONUSER};
EOF
		done
	    }
	    
	    $SU -c "psql -q -t -A -c \"select sequence_name from information_schema.sequences where sequence_schema = '$schema'\" '$1'" - ${PGADMIN} | {
		while read sequence
		do
	            cat <<EOF
ALTER SEQUENCE "$schema"."$sequence" OWNER TO ${DAEMONUSER};
EOF
		done
	    }
	done
    }

    tablename=$($SU -c "psql -q -t -A -c \"select table_name from information_schema.tables where table_schema = '_ermrest' AND table_name = 'model_catalog_annotation'\" '$1'" - ${PGADMIN} < /dev/null)
    if [[ -z "$tablename" ]]
    then
	cat <<EOF
CREATE TABLE IF NOT EXISTS _ermrest.model_catalog_annotation (
  annotation_uri text PRIMARY KEY,
  annotation_value json
);
ALTER TABLE _ermrest.model_catalog_annotation OWNER TO ${DAEMONUSER};
EOF
    fi

    # try to fix up a mistake in earlier dev versions of acls-everywhere branch...
    tablename=$($SU -c "psql -q -t -A -c \"select table_name from information_schema.tables where table_schema = '_ermrest' AND table_name = 'model_model_acl'\" '$1'" - ${PGADMIN} < /dev/null)
    if [[ -n "$tablename" ]]
    then
	cat <<EOF
ALTER TABLE _ermrest.model_model_acl RENAME TO model_catalog_acl;
EOF
    fi

    tablename=$($SU -c "psql -q -t -A -c \"select table_name from information_schema.tables where table_schema = '_ermrest' AND table_name = 'meta'\" '$1'" - ${PGADMIN} < /dev/null)
    if [[ -n "$tablename" ]]
    then
	cat <<EOF
CREATE TABLE IF NOT EXISTS _ermrest.model_catalog_acl (
  acl text PRIMARY KEY,
  members text[]
);
ALTER TABLE _ermrest.model_catalog_acl OWNER TO ${DAEMONUSER};

CREATE TABLE IF NOT EXISTS _ermrest.model_schema_acl (
  schema_name text,
  acl text,
  members text[],
  PRIMARY KEY (schema_name, acl)
);
ALTER TABLE _ermrest.model_schema_acl OWNER TO ${DAEMONUSER};

CREATE TABLE IF NOT EXISTS _ermrest.model_table_acl (
  schema_name text,
  table_name text,
  acl text,
  members text[],
  PRIMARY KEY (schema_name, table_name, acl)
);
ALTER TABLE _ermrest.model_table_acl OWNER TO ${DAEMONUSER};

CREATE TABLE IF NOT EXISTS _ermrest.model_column_acl (
  schema_name text,
  table_name text,
  column_name text,
  acl text,
  members text[],
  PRIMARY KEY (schema_name, table_name, column_name, acl)
);
ALTER TABLE _ermrest.model_column_acl OWNER TO ${DAEMONUSER};

CREATE TABLE IF NOT EXISTS _ermrest.model_keyref_acl (
  from_schema_name text,
  from_table_name text,
  from_column_names text[],
  to_schema_name text,
  to_table_name text,
  to_column_names text[],
  acl text,
  members text[],
  PRIMARY KEY (from_schema_name, from_table_name, from_column_names, to_schema_name, to_table_name, to_column_names, acl)
);
ALTER TABLE _ermrest.model_keyref_acl OWNER TO ${DAEMONUSER};

INSERT INTO _ermrest.model_catalog_acl (acl, members)
SELECT
  CASE
    WHEN key = 'owner' THEN 'owner'
    WHEN key = 'read_user' THEN 'enumerate'
    WHEN key = 'content_read_user' THEN 'select'
    WHEN key = 'content_write_user' THEN 'write'
    WHEN key = 'schema_write_user' THEN 'create'
  END AS key,
  array_agg(value) AS members
FROM _ermrest.meta
WHERE key IN ('owner', 'read_user', 'content_read_user', 'content_write_user', 'schema_write_user')
GROUP BY key
;

DROP TABLE _ermrest.meta;

EOF
    fi

    tablename=$($SU -c "psql -q -t -A -c \"select table_name from information_schema.tables where table_schema = '_ermrest' AND table_name = 'model_table_dynacl'\" '$1'" - ${PGADMIN} < /dev/null)
    if [[ -z "$tablename" ]]
    then
	cat <<EOF

CREATE TABLE IF NOT EXISTS _ermrest.model_table_dynacl (
  schema_name text,
  table_name text,
  binding_name text,
  binding jsonb NOT NULL,
  PRIMARY KEY (schema_name, table_name, binding_name)
);
ALTER TABLE _ermrest.model_table_dynacl OWNER TO ${DAEMONUSER};

CREATE TABLE IF NOT EXISTS _ermrest.model_column_dynacl (
  schema_name text,
  table_name text,
  column_name text,
  binding_name text,
  binding jsonb NOT NULL,
  PRIMARY KEY (schema_name, table_name, column_name, binding_name)
);
ALTER TABLE _ermrest.model_column_dynacl OWNER TO ${DAEMONUSER};

CREATE TABLE IF NOT EXISTS _ermrest.model_keyref_dynacl (
  from_schema_name text,
  from_table_name text,
  from_column_names text[],
  to_schema_name text,
  to_table_name text,
  to_column_names text[],
  binding_name text,
  binding jsonb NOT NULL,
  PRIMARY KEY (from_schema_name, from_table_name, from_column_names, to_schema_name, to_table_name, to_column_names, binding_name)
);
ALTER TABLE _ermrest.model_keyref_dynacl OWNER TO ${DAEMONUSER};

EOF
    fi
    
    cat <<EOF

ALTER SCHEMA _ermrest OWNER TO ${DAEMONUSER};

CREATE OR REPLACE FUNCTION _ermrest.current_client() RETURNS text STABLE AS \$\$
BEGIN
  RETURN current_setting('webauthn2.client');
EXCEPTION WHEN OTHERS THEN
  RETURN NULL::text;
END;
\$\$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION _ermrest.current_client_obj() RETURNS json STABLE AS \$\$
BEGIN
  RETURN current_setting('webauthn2.client_json')::json;
EXCEPTION WHEN OTHERS THEN
  RETURN NULL::json;
END;
\$\$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION _ermrest.current_attributes() RETURNS text[] STABLE AS \$\$
  SELECT current_setting('webauthn2.attributes_array')::text[];
\$\$ LANGUAGE SQL;

DROP FUNCTION IF EXISTS _ermrest.ts_iso8601(anynonarray) CASCADE;
DROP FUNCTION IF EXISTS _ermrest.ts_iso8601(anyarray) CASCADE;
DROP FUNCTION IF EXISTS _ermrest.ts_iso8601(date) CASCADE;
DROP FUNCTION IF EXISTS _ermrest.ts_iso8601(timestamptz) CASCADE;
DROP FUNCTION IF EXISTS _ermrest.ts_iso8601(timestamp) CASCADE;
DROP FUNCTION IF EXISTS _ermrest.ts_iso8601(timetz) CASCADE;
DROP FUNCTION IF EXISTS _ermrest.ts_iso8601(time) CASCADE;

CREATE OR REPLACE FUNCTION _ermrest.astext(timestamptz) RETURNS text IMMUTABLE AS \$\$
  SELECT to_char(\$1 AT TIME ZONE 'UTC', 'YYYY-MM-DD"T"HH24:MI:SS"Z"');
\$\$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION _ermrest.astext(timestamp) RETURNS text IMMUTABLE AS \$\$
  SELECT to_char(\$1, 'YYYY-MM-DD"T"HH24:MI:SS');
\$\$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION _ermrest.astext(timetz) RETURNS text IMMUTABLE AS \$\$
  SELECT to_char(date_part('hour', \$1 AT TIME ZONE 'UTC'), '09') 
     || ':' || to_char(date_part('minute', \$1 AT TIME ZONE 'UTC'), '09') 
     || ':' || to_char(date_part('second', \$1 AT TIME ZONE 'UTC'), '09');
\$\$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION _ermrest.astext(time) RETURNS text IMMUTABLE AS \$\$
  SELECT to_char(date_part('hour', \$1), '09') 
     || ':' || to_char(date_part('minute', \$1), '09') 
     || ':' || to_char(date_part('second', \$1), '09');
\$\$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION _ermrest.astext(date) RETURNS text IMMUTABLE AS \$\$
  SELECT to_char(\$1, 'YYYY-MM-DD');
\$\$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION _ermrest.astext(anyarray) RETURNS text IMMUTABLE AS \$\$
  SELECT array_agg(_ermrest.astext(v))::text FROM unnest(\$1) s(v);
\$\$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION _ermrest.astext(anynonarray) RETURNS text IMMUTABLE AS \$\$
  SELECT \$1::text;
\$\$ LANGUAGE SQL;

CREATE TABLE IF NOT EXISTS _ermrest.model_pseudo_notnull (
  id serial PRIMARY KEY,
  schema_name text NOT NULL,
  table_name text NOT NULL,
  column_name text NOT NULL,
  UNIQUE(schema_name, table_name, column_name)
);

COMMIT;

BEGIN;
SELECT _ermrest.model_change_event();
COMMIT;

EOF
}

pg_upgrade_registry_sql()
{
    cat <<EOF
BEGIN;
ALTER ROLE ${DAEMONUSER} CREATEDB;
ALTER DATABASE ermrest OWNER TO ${DAEMONUSER};
CREATE SCHEMA IF NOT EXISTS ermrest;
ALTER SCHEMA ermrest OWNER TO ${DAEMONUSER};
EOF

    $SU -c "psql -q -t -A -c \"SELECT nspname FROM pg_namespace WHERE nspname ~ '^webauthn' AND NOT pg_is_other_temp_schema(oid)\" ermrest" - ${PGADMIN} | {
	while read schema
	do
	    cat <<EOF
ALTER SCHEMA "$schema" OWNER TO ${DAEMONUSER};
EOF
	    
	    $SU -c "psql -q -t -A -c \"select table_name from information_schema.tables where table_schema = '$schema'\" ermrest" - ${PGADMIN} | {
		while read table
		do
		    cat <<EOF
ALTER TABLE "$schema"."$table" OWNER TO ${DAEMONUSER};
EOF
		done
	    }
	    
	    $SU -c "psql -q -t -A -c \"select sequence_name from information_schema.sequences where sequence_schema = '$schema'\" ermrest" - ${PGADMIN} | {
		while read sequence
		do
	            cat <<EOF
ALTER SEQUENCE "$schema"."$sequence" OWNER TO ${DAEMONUSER};
EOF
		done
	    }
	done
    }

    cat <<EOF
COMMIT;
EOF

}

# prevent overwrites
[[ -r /home/${DAEMONUSER}/ermrest_config.json ]] || $SU -c "cp -a ${SHAREDIR}/ermrest_config.json ." - "${DAEMONUSER}"

if pgdbid 'ermrest'
then
    # idempotently fill in missing parts and update role assignments
    pg_upgrade_registry_sql > ${TMP_SQL}
    $SU -c "psql -e ermrest" - ${PGADMIN} < ${TMP_SQL}

    $SU -c "psql -q -t -A -c \"select descriptor::json->>'dbname' from ermrest.simple_registry\" ermrest" - ${PGADMIN} | {
	catalogs=()
	while read line
	do
	    catalogs+=("$line")
	done
	< /dev/null

	for catalog in "${catalogs[@]}"
	do
	    pg_upgrade_catalog_sql "$catalog" > ${TMP_SQL}
	    $SU -c "psql -e '$catalog'" - ${PGADMIN} < ${TMP_SQL}
	done
    }
else
    $SU -c "createdb -O \"$DAEMONUSER\" ermrest" - ${PGADMIN}
fi


# these are supposed to be idempotent too...
$SU -c "createlang -d ermrest plpgsql" - "${PGADMIN}"
$SU -c "psql -d template1 -c \"CREATE EXTENSION pg_trgm;\"" - ${PGADMIN}
$SU -c "${SBINDIR}/ermrest-registry-deploy" - "${DAEMONUSER}"

